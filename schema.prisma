generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  role      String // 'LESSER' or 'RENTER'
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  emailVerified DateTime?  // Add this line
  // Relations
  lesserUser         LesserUser?
  renterUser         RenterUser?
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]

  @@map(name: "users")
}

model LesserPost {
  id          String      @id @default(cuid())
  title       String
  description String?
  address     String
  photos      String[]
  published   Boolean     @default(false)
  author      LesserUser? @relation(fields: [authorId], references: [id])
  authorId    String?

  @@map(name: "lesserposts")
}

model LesserUser {
  id        String       @id @default(cuid())
  name      String?
  email     String?      @unique
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")
  posts     LesserPost[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map(name: "lessers")
}

model RenterUser {
  id           String   @id @default(cuid())
  name         String?
  email        String?  @unique
  description  String?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  applications String? // string of LesserPost IDs

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@map(name: "renters")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
